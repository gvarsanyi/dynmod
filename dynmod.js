// Generated by CoffeeScript 1.6.3
(function() {
  var child_process, dir, fs, home_folder_ref, read, trim,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  child_process = require('child_process');

  fs = require('fs');

  home_folder_ref = process.platform === 'win32' ? 'USERPROFILE' : 'HOME';

  dir = process.env[home_folder_ref] + '/.dynmod';

  trim = function(str) {
    return str.replace(/^\s+|\s+$/g, '');
  };

  read = function(pkg, version, callback) {
    var err, path;
    try {
      path = dir + '/' + pkg + '/' + version + '/node_modules/' + pkg;
      return callback(null, require(path));
    } catch (_error) {
      err = _error;
      return callback(err);
    }
  };

  module.exports.require = function(pkg, version, callback) {
    var fallback;
    if (typeof version === 'function') {
      callback = version;
      version = false;
    }
    fallback = function() {
      return module.exports.installedVersions(pkg, function(err, versions) {
        if (versions && versions.length && version === false) {
          version = versions[versions.length - 1];
        }
        if (versions && versions.length && __indexOf.call(versions, version) >= 0) {
          return read(pkg, version, callback);
        }
        return module.exports.install(pkg, version, function(err, version) {
          if (err || !version) {
            return callback(err || new Error('Error installing ' + pkg));
          }
          return read(pkg, version, callback);
        });
      });
    };
    if (version) {
      return fs.exists(dir + '/' + pkg + '/' + version + '/.dynmod-proper', function(e) {
        if (e) {
          return read(pkg, version, callback);
        }
        return fs.exists(dir + '/' + pkg + '/' + version, function(exists) {
          if (exists) {
            return callback(new Error(pkg + '@' + version + ' is partially ' + 'installed (possibly being installed by ' + 'an other process?). If you are sure this' + ' is a failed installation, use require(' + '\'dynmod\').remove(\'' + pkg + '\', \'' + version + '\'); to remove it.'));
          }
          return fallback();
        });
      });
    } else {
      return fallback();
    }
  };

  module.exports.remove = function(pkg, version, callback) {
    var pkg_dir;
    if (!version) {
      return callback(new Error('version is required to remove'));
    }
    console.log('[dynmod] removing ' + pkg + '@' + version);
    pkg_dir = dir + '/' + pkg;
    return child_process.exec('rm -rf ' + pkg_dir + '/' + version, function(err) {
      if (err) {
        return callback(err);
      }
      return fs.readdir(pkg_dir, function(err, files) {
        if (err || (files && files.length)) {
          return callback();
        }
        return child_process.exec('rm -rf ' + pkg_dir, function(err) {
          return callback();
        });
      });
    });
  };

  module.exports.markAsProper = function(pkg, version, callback) {
    var path;
    path = dir + '/' + pkg + '/' + version + '/.dynmod-proper';
    return fs.writeFile(path, '1', callback);
  };

  module.exports.install = function(pkg, version, callback) {
    var install;
    install = function() {
      return module.exports.installedVersions(pkg, function(err, versions) {
        var pkg_dir;
        if (err) {
          return callback(err);
        }
        if (versions && versions.length && __indexOf.call(versions, version) >= 0) {
          return callback(new Error(pkg + '@' + version + ' is already installed'));
        }
        pkg_dir = dir + '/' + pkg + '/' + version;
        return child_process.exec('mkdir -p ' + pkg_dir, function(err) {
          var cm;
          if (err) {
            return callback(err);
          }
          console.log('[dynmod] attempting to install ' + pkg + '@' + version);
          cm = 'npm install ' + pkg + '@' + version + ' 2>1 | grep -v "npm http "';
          return child_process.exec(cm, {
            cwd: pkg_dir
          }, function(err, stdout) {
            if (err) {
              return module.exports.remove(pkg, version, function() {
                return callback(err);
              });
            }
            return module.exports.markAsProper(pkg, version, function(err) {
              if (err) {
                return callback(err);
              }
              console.log('[dynmod] installed ' + pkg + '@' + version);
              return callback(null, version);
            });
          });
        });
      });
    };
    if (typeof version === 'function') {
      callback = version;
      version = false;
    }
    if (version) {
      return install();
    }
    return module.exports.latestVersion(pkg, function(err, latest_version) {
      if (err) {
        return callback(err);
      }
      version = latest_version;
      return install();
    });
  };

  module.exports.installedVersions = function(pkg, callback) {
    return fs.exists(dir + '/' + pkg, function(exists) {
      if (!exists) {
        return callback(null, false);
      }
      return fs.readdir(dir + '/' + pkg, function(err, versions) {
        if (!versions.length) {
          return callback(null, false);
        }
        return callback(null, versions);
      });
    });
  };

  module.exports.latestVersion = function(pkg, callback) {
    var cmd;
    cmd = 'npm show ' + pkg + ' version 2> /dev/null';
    return child_process.exec(cmd, function(err, stdout, stderr) {
      var latest_version;
      if (err) {
        return callback(err);
      }
      latest_version = trim(stdout);
      return module.exports.installedVersions(pkg, function(err, versions) {
        return callback(null, latest_version, versions && __indexOf.call(versions, latest_version) >= 0);
      });
    });
  };

}).call(this);
