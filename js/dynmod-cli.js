#!/usr/bin/env node
// Generated by CoffeeScript 1.7.1
(function() {
  var dynmod, error, pkgs,
    __slice = [].slice;

  dynmod = require('./dynmod');

  error = function(err) {
    var e;
    if (Array.isArray(err)) {
      console.error(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = err.length; _i < _len; _i++) {
          e = err[_i];
          _results.push(String(e));
        }
        return _results;
      })()).join('\n'));
    } else {
      console.error(String(err));
    }
    return process.exit(1);
  };

  switch (process.argv[2]) {
    case 'i':
    case 'install':
      pkgs = process.argv.slice(3);
      dynmod.install.apply(dynmod, __slice.call(pkgs).concat([function(err) {
        if (err) {
          return error(err);
        }
      }]));
      break;
    case 'del':
    case 'delete':
    case 'rm':
    case 'remove':
      pkgs = process.argv.slice(3);
      dynmod.remove.apply(dynmod, __slice.call(pkgs).concat([function(err) {
        if (err) {
          return error(err);
        }
      }]));
      break;
    case 'll':
    case 'ls':
    case 'list':
      pkgs = process.argv.slice(3);
      dynmod.list.apply(dynmod, __slice.call(pkgs).concat([function(err, versions) {
        var pkg, vers;
        console.log(err, versions);
        if (versions) {
          if (pkgs.length !== 1) {
            for (pkg in versions) {
              vers = versions[pkg];
              console.log(pkg + ': ' + vers.join(', '));
            }
          } else {
            console.log(versions.join(', '));
          }
        }
        if (err) {
          return error(err);
        }
      }]));
      break;
    case 'c':
    case 'cur':
    case 'curr':
    case 'current':
      pkgs = process.argv.slice(3);
      dynmod.current.apply(dynmod, __slice.call(pkgs).concat([function() {
        var err, i, pkg, versions, _i, _len, _results;
        err = arguments[0], versions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        _results = [];
        for (i = _i = 0, _len = pkgs.length; _i < _len; i = ++_i) {
          pkg = pkgs[i];
          _results.push(console.log(pkg + ': ' + (versions[i] || '-')));
        }
        return _results;
      }]));
      break;
    default:
      error(new Error('Invalid command. Usage:\n' + '\ndynmod [command] module[@version]\n\n' + 'Commands: install (i), remove (rm, del, delete), list ' + '(ls, ll)\n'));
  }

}).call(this);
