#!/usr/bin/env node
// Generated by CoffeeScript 1.7.1
(function() {
  var dynmod, error, pkg, version;

  dynmod = require('./dynmod');

  error = function(err) {
    console.error(String(err));
    return process.exit(1);
  };

  switch (process.argv[2]) {
    case 'i':
    case 'install':
      pkg = process.argv[3] || error(new Error('no module specified'));
      dynmod.install(pkg, function(err) {
        if (err) {
          return error(err);
        }
      });
      break;
    case 'del':
    case 'delete':
    case 'rm':
    case 'remove':
      pkg = process.argv[3] || error(new Error('no module specified'));
      dynmod.remove(pkg, function(err) {
        if (err) {
          return error(err);
        }
      });
      break;
    case 'll':
    case 'ls':
    case 'list':
      if (pkg = process.argv[3]) {
        dynmod.list(pkg, function(err, versions) {
          if (err) {
            return error(err);
          }
          if (pkg) {
            if (!versions || (versions && !versions.length)) {
              return console.log(pkg + ' is not installed');
            }
            return console.log(pkg + ': ' + versions.join(', '));
          }
        });
      } else {
        dynmod.listAll(function(err, versions) {
          var ver, _results;
          _results = [];
          for (pkg in versions) {
            ver = versions[pkg];
            _results.push(console.log(pkg + ': ' + ver.join(', ')));
          }
          return _results;
        });
      }
      break;
    case 'c':
    case 'cur':
    case 'curr':
    case 'current':
      pkg = process.argv[3] || error(new Error('missing module'));
      dynmod.current(pkg, function(err, version, installed, versions) {
        var locals, v;
        if (err) {
          return error(err);
        }
        console.log('Latest version of ' + pkg + ' in npm: ' + version);
        if (installed && versions && versions.length <= 1) {
          return console.log('  - this is the only version installed locally');
        } else if (installed && versions && versions.length > 1) {
          console.log('  - installed locally');
          locals = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = versions.length; _i < _len; _i++) {
              v = versions[_i];
              if (v !== version) {
                _results.push(v);
              }
            }
            return _results;
          })();
          return console.log('  - also installed: ' + locals.join(', '));
        } else if (versions && versions.length > 0) {
          console.log('  - this version is NOT installed locally');
          return console.log('  - installed: ' + versions.join(', '));
        } else {
          return console.log('  - module is NOT installed locally');
        }
      });
      break;
    case 'test':
      pkg = process.argv[3] || error(new Error('missing module'));
      version = process.argv[4] || false;
      dynmod(pkg, function(err, mod) {
        if (err) {
          return error(err);
        }
        return console.log(mod);
      });
      break;
    default:
      error(new Error('Invalid command. Usage:\n' + '\ndynmod [command] module[@version]\n\n' + 'Commands: install (i), remove (rm, del, delete), list ' + '(ls, ll)\n'));
  }

}).call(this);
