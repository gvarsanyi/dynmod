// Generated by CoffeeScript 1.7.1
(function() {
  var child_process, current, dir, fs, list, remove,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  child_process = require('child_process');

  fs = require('fs');

  current = require('./current');

  dir = require('./dir');

  list = require('./list');

  remove = require('./remove');

  module.exports = function(spec, callback) {
    var install, pkg, version, _ref;
    _ref = spec.split('@'), pkg = _ref[0], version = _ref[1];
    install = function() {
      return list(pkg, function(err, versions) {
        var pkg_dir;
        if (err) {
          return callback(err);
        }
        if (versions && versions.length && __indexOf.call(versions, version) >= 0) {
          return callback(new Error(pkg + '@' + version + ' is already installed'));
        }
        pkg_dir = dir + '/' + pkg + '/' + version;
        return child_process.exec('mkdir -p ' + pkg_dir, function(err) {
          var cm;
          if (err) {
            return callback(err);
          }
          console.log('[dynmod] attempting to install ' + pkg + '@' + version);
          cm = 'npm install ' + pkg + '@' + version + ' 2>1 | grep -v "npm http "';
          return child_process.exec(cm, {
            cwd: pkg_dir
          }, function(err, stdout) {
            var path;
            if (err) {
              return remove(spec, function() {
                return callback(err);
              });
            }
            path = dir + '/' + pkg + '/' + version + '/.dynmod-proper';
            return fs.writeFile(path, '1', function(err) {
              if (err) {
                return callback(err);
              }
              delete current.cache[pkg];
              console.log('[dynmod] installed ' + pkg + '@' + version);
              return callback(null, version);
            });
          });
        });
      });
    };
    if (version) {
      return install();
    }
    return current(pkg, function(err, latest_version) {
      if (err) {
        return callback(err);
      }
      version = latest_version;
      return install();
    });
  };

}).call(this);
