// Generated by CoffeeScript 1.7.1
(function() {
  var cache, dir, err_msg, fs, install, list, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  util = require('util');

  cache = require('../cache');

  dir = require('../dir');

  install = require('./install');

  list = require('./list');

  err_msg = '%s is partially installed (possibly being installed by an other pr' + 'ocess?). If you are sure this is a failed installation, use requir' + 'e(\'dynmod\').remove(\'%s\'); to remove it.';

  module.exports = function(spec, callback) {
    var mod, pkg, read, verify_version, version, _ref, _ref1;
    _ref = spec.split('@'), pkg = _ref[0], version = _ref[1];
    if (mod = ((_ref1 = cache.pkg[pkg]) != null ? _ref1[version || currents[pkg]] : void 0) != null) {
      return callback(null, mod);
    }
    read = function() {
      var err, path, _base;
      try {
        path = dir + '/' + pkg + '/' + version + '/node_modules/' + pkg;
        mod = require(path);
        ((_base = cache.pkg)[pkg] != null ? _base[pkg] : _base[pkg] = {})[version] = mod;
        return callback(null, mod);
      } catch (_error) {
        err = _error;
        return callback(err);
      }
    };
    verify_version = function() {
      return fs.exists(dir + '/' + pkg + '/' + version + '/.dynmod-proper', function(exists) {
        if (exists) {
          return read();
        }
        return callback(new Error(util.format(err_msg, spec, spec)));
      });
    };
    return list(pkg, function(err, versions) {
      if (!version) {
        if (err) {
          return callback(err);
        }
        if (versions && versions.length > 0) {
          version = versions.pop();
          return verify_version();
        } else {
          return install(pkg, function(err, _version) {
            if (err) {
              return callback(err);
            }
            version = _version;
            return verify_version();
          });
        }
      } else if (__indexOf.call(versions, version) >= 0) {
        return verify_version();
      } else {
        return install(spec, function(err) {
          if (err) {
            return callback(err);
          }
          return verify_version();
        });
      }
    });
  };

  module.exports.sync = function(spec) {
    var mod, path, pkg, version, versions, _ref, _ref1;
    _ref = spec.split('@'), pkg = _ref[0], version = _ref[1];
    if (mod = ((_ref1 = cache.pkg[pkg]) != null ? _ref1[version || currents[pkg]] : void 0) != null) {
      return mod;
    }
    versions = list.sync(pkg);
    if (!version) {
      if (versions && versions.length) {
        version = versions.pop();
      } else {
        version = install.sync(pkg);
      }
    } else if (!(versions && versions.length && __indexOf.call(versions, version) >= 0)) {
      install.sync(spec);
    }
    if (!fs.existsSync(dir + '/' + pkg + '/' + version + '/.dynmod-proper')) {
      throw new Error(util.format(err_msg, spec, spec));
    }
    path = dir + '/' + pkg + '/' + version + '/node_modules/' + pkg;
    return require(path);
  };

}).call(this);
